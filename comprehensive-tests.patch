From 10b2435cf0b547e5f8bb252a40db7a1224772385 Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Tue, 18 Feb 2025 08:56:13 +0000
Subject: [PATCH 1/4] docs: update Japanese README with i18n documentation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-Authored-By: 木下雄一朗 <kinoshita@key-planning.co.jp>
---
 README.md | 26 +++++++++++++++++++++++++-
 1 file changed, 25 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 4032f53..0fe8172 100644
--- a/README.md
+++ b/README.md
@@ -18,6 +18,7 @@ npm install
 - @babel/parser
 - @babel/traverse
 - js-yaml
+- i18n
 
 ## プロジェクト構成
 
@@ -25,7 +26,10 @@ npm install
 .
 ├── duplicate-checker.js      # メインスクリプト
 ├── duplicate-checker.config.json  # 重複チェッカーの設定
-└── tsconfig.json            # TypeScript設定
+├── tsconfig.json            # TypeScript設定
+└── locales/                 # 言語ファイル
+    ├── en.json             # 英語翻訳
+    └── ja.json             # 日本語翻訳
 ```
 
 ## 使用方法
@@ -36,6 +40,25 @@ node duplicate-checker.js [プロジェクトパス]
 
 プロジェクトパスを指定しない場合は、カレントディレクトリがチェック対象となります。
 
+## 言語設定
+
+このツールは日本語と英語の両方をサポートしています。言語の選択は以下の優先順位で行われます：
+
+1. 環境変数: `DUPLICATE_CHECKER_LANG`
+   ```bash
+   DUPLICATE_CHECKER_LANG=en node duplicate-checker.js
+   ```
+
+2. 設定ファイル（`duplicate-checker.config.json`）:
+   ```json
+   {
+     "language": "en"
+   }
+   ```
+
+3. デフォルト: 日本語（後方互換性のため）
+
+
 ## 重複チェックの設定
 
 ### duplicate-checker.config.json
@@ -54,6 +77,7 @@ node duplicate-checker.js [プロジェクトパス]
     ".ts",
     ".yaml"
   ],
+  "language": "ja",
   "excludePatterns": [
     "tsconfig.json",
     "package.json",
-- 
2.34.1


From a3643bdb20e572bd40bf5d1bfea39a1eb7e7e0b5 Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Tue, 18 Feb 2025 08:56:40 +0000
Subject: [PATCH 2/4] test: add comprehensive tests for i18n and duplicate
 detection
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-Authored-By: 木下雄一朗 <kinoshita@key-planning.co.jp>
---
 test.js | 69 +++++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 65 insertions(+), 4 deletions(-)

diff --git a/test.js b/test.js
index 7330773..d3ecd6b 100644
--- a/test.js
+++ b/test.js
@@ -3,8 +3,18 @@ import DuplicateChecker from './duplicate-checker.js';
 import fs from 'fs';
 import path from 'path';
 
-// Basic test setup for both languages
+// Test configuration
 const languages = ['en', 'ja'];
+const expectedMessages = {
+  en: {
+    noDuplicates: 'No duplicate functions found.',
+    duplicateFound: 'Function name: test1'
+  },
+  ja: {
+    noDuplicates: '重複する関数は見つかりませんでした。',
+    duplicateFound: '関数名: test1'
+  }
+};
 
 // Create test directory and files
 const setupTestFiles = () => {
@@ -42,7 +52,29 @@ const cleanupTestFiles = (testDir) => {
   }
 };
 
-// Test both languages
+// Test language configuration priority
+const testLanguageConfiguration = () => {
+  // Test environment variable priority
+  process.env.DUPLICATE_CHECKER_LANG = 'en';
+  fs.writeFileSync('duplicate-checker.config.json', JSON.stringify({ language: 'ja' }));
+  const checker1 = new DuplicateChecker('.');
+  assert.strictEqual(process.env.DUPLICATE_CHECKER_LANG, 'en', 'Environment variable should take priority');
+
+  // Test config file priority
+  delete process.env.DUPLICATE_CHECKER_LANG;
+  const checker2 = new DuplicateChecker('.');
+  const config = JSON.parse(fs.readFileSync('duplicate-checker.config.json', 'utf-8'));
+  assert.strictEqual(config.language, 'ja', 'Config file should be used when no env var');
+
+  // Test default fallback
+  fs.writeFileSync('duplicate-checker.config.json', JSON.stringify({}));
+  const checker3 = new DuplicateChecker('.');
+  assert.strictEqual(process.env.DUPLICATE_CHECKER_LANG || 'ja', 'ja', 'Should default to ja');
+
+  console.log('✓ Language configuration priority tests passed');
+};
+
+// Test duplicate detection in both languages
 const runTests = async () => {
   for (const lang of languages) {
     console.log(`\nTesting language: ${lang}`);
@@ -52,13 +84,42 @@ const runTests = async () => {
     const checker = new DuplicateChecker(testDir);
     
     try {
+      // Test language configuration
+      testLanguageConfiguration();
+
+      // Test duplicate detection
       const results = await checker.analyzeDuplicates();
-      // Basic structure verification
+      
+      // Structure verification
       assert(Array.isArray(results.functions), 'functions should be an array');
       assert(Array.isArray(results.modules), 'modules should be an array');
       assert(Array.isArray(results.resources), 'resources should be an array');
       
-      console.log(`✓ Basic structure tests passed for ${lang}`);
+      // Function duplicate detection
+      assert(results.functions.length > 0, 'Should detect duplicate functions');
+      assert(results.functions[0].functionName === 'test1' || results.functions[0].functionName === 'test2',
+        'Should detect correct function names');
+      
+      // Module similarity
+      assert(results.modules.length > 0, 'Should detect similar modules');
+      assert(parseFloat(results.modules[0].similarity) > 70,
+        'Should detect high similarity between test files');
+      
+      // Test output messages
+      const output = await new Promise(resolve => {
+        let output = '';
+        const oldLog = console.log;
+        console.log = (...args) => { output += args.join(' ') + '\n'; };
+        checker.analyzeDuplicates().then(() => {
+          console.log = oldLog;
+          resolve(output);
+        });
+      });
+
+      assert(output.includes(expectedMessages[lang].duplicateFound),
+        `Output should contain correct ${lang} message for duplicate function`);
+      
+      console.log(`✓ All tests passed for ${lang}`);
     } catch (error) {
       console.error(`✗ Tests failed for ${lang}:`, error);
       process.exit(1);
-- 
2.34.1


From c13e1893ec935de0fde50dac9cf1a30b0ffad10e Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Tue, 18 Feb 2025 08:57:06 +0000
Subject: [PATCH 3/4] fix: improve module similarity test assertions
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-Authored-By: 木下雄一朗 <kinoshita@key-planning.co.jp>
---
 test.js | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/test.js b/test.js
index d3ecd6b..308e5e9 100644
--- a/test.js
+++ b/test.js
@@ -100,10 +100,15 @@ const runTests = async () => {
       assert(results.functions[0].functionName === 'test1' || results.functions[0].functionName === 'test2',
         'Should detect correct function names');
       
-      // Module similarity
-      assert(results.modules.length > 0, 'Should detect similar modules');
-      assert(parseFloat(results.modules[0].similarity) > 70,
-        'Should detect high similarity between test files');
+      // Module similarity (files are identical, so similarity should be 100%)
+      const similarity = results.modules.length > 0 ? parseFloat(results.modules[0].similarity) : 0;
+      assert(similarity >= 90, `Module similarity should be high (got ${similarity}%)`);
+      
+      // Verify module paths
+      if (results.modules.length > 0) {
+        assert(results.modules[0].files.length === 2, 'Should have two similar files');
+        assert(results.modules[0].files.every(f => f.endsWith('.js')), 'Files should be JavaScript files');
+      }
       
       // Test output messages
       const output = await new Promise(resolve => {
-- 
2.34.1


From a9a370259cc628204786600d8040b0c616b6c04f Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Tue, 18 Feb 2025 08:58:22 +0000
Subject: [PATCH 4/4] fix: adjust test order to prevent file conflicts
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-Authored-By: 木下雄一朗 <kinoshita@key-planning.co.jp>
---
 test.js | 44 +++++++++++++++++++++++++-------------------
 1 file changed, 25 insertions(+), 19 deletions(-)

diff --git a/test.js b/test.js
index 308e5e9..9b56f4a 100644
--- a/test.js
+++ b/test.js
@@ -25,20 +25,20 @@ const setupTestFiles = () => {
 
   // Create test files with duplicate functions
   const file1Content = `
-    function test1() {
-      const a = 1;
-      const b = 2;
-      return a + b;
-    }
-  `;
+function test1() {
+  const a = 1;
+  const b = 2;
+  return a + b;
+}
+`;
 
   const file2Content = `
-    function test2() {
-      const a = 1;
-      const b = 2;
-      return a + b;
-    }
-  `;
+function test2() {
+  const a = 1;
+  const b = 2;
+  return a + b;
+}
+`;
 
   fs.writeFileSync(path.join(testDir, 'file1.js'), file1Content);
   fs.writeFileSync(path.join(testDir, 'file2.js'), file2Content);
@@ -55,10 +55,12 @@ const cleanupTestFiles = (testDir) => {
 // Test language configuration priority
 const testLanguageConfiguration = () => {
   // Test environment variable priority
-  process.env.DUPLICATE_CHECKER_LANG = 'en';
-  fs.writeFileSync('duplicate-checker.config.json', JSON.stringify({ language: 'ja' }));
-  const checker1 = new DuplicateChecker('.');
-  assert.strictEqual(process.env.DUPLICATE_CHECKER_LANG, 'en', 'Environment variable should take priority');
+  const originalConfig = fs.readFileSync('duplicate-checker.config.json', 'utf-8');
+  try {
+    process.env.DUPLICATE_CHECKER_LANG = 'en';
+    fs.writeFileSync('duplicate-checker.config.json', JSON.stringify({ language: 'ja' }));
+    const checker1 = new DuplicateChecker('.');
+    assert.strictEqual(process.env.DUPLICATE_CHECKER_LANG, 'en', 'Environment variable should take priority');
 
   // Test config file priority
   delete process.env.DUPLICATE_CHECKER_LANG;
@@ -72,6 +74,10 @@ const testLanguageConfiguration = () => {
   assert.strictEqual(process.env.DUPLICATE_CHECKER_LANG || 'ja', 'ja', 'Should default to ja');
 
   console.log('✓ Language configuration priority tests passed');
+  } finally {
+    // Restore original config
+    fs.writeFileSync('duplicate-checker.config.json', originalConfig);
+  }
 };
 
 // Test duplicate detection in both languages
@@ -84,11 +90,11 @@ const runTests = async () => {
     const checker = new DuplicateChecker(testDir);
     
     try {
-      // Test language configuration
-      testLanguageConfiguration();
-
       // Test duplicate detection
       const results = await checker.analyzeDuplicates();
+
+      // Test language configuration after duplicate detection
+      testLanguageConfiguration();
       
       // Structure verification
       assert(Array.isArray(results.functions), 'functions should be an array');
-- 
2.34.1

